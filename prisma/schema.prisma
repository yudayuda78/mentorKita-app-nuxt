generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id    Int @id @default(autoincrement())
  username  String @unique
  email     String @unique
  password  String
  createAt DateTime @default(now())
  asnwerLatihan AnswerLatihanUser[]
  score ScoreLatihan[]
  subscriptions Subscription[]
  enrollmentsSnbt EnrollmentSnbtTryout[]
  paymentsSnbt PaymentSnbtTryout[]
  paymentProduct PaymentProduct[]
  shareSnbt ShareSnbt[]
  clickSnbt ClickSnbtTryout[]
  userProfile UserProfile?
}

model UserProfile {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  fullName        String
  phoneNumber     String
  birthDate       DateTime
  gender          String
  schoolOrigin    String
  targetUniversity String
  targetMajor     String

  user            User     @relation(fields: [userId], references: [id])
}

model Admin {
  id       Int    @id @default(autoincrement())
  username    String @unique
  password String
  role     String
}

model Subscription{
  id Int @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  isActive    Boolean  @default(true)
  startedAt   DateTime @default(now())
  expiredAt   DateTime
}

model LatihanClass {
  id      Int             @id @default(autoincrement())
  name    String
  courses LatihanCourse[]
}

model LatihanCourse {
  id       Int             @id @default(autoincrement())
  name     String
  classes  LatihanClass  @relation(fields: [latihanClassId], references: [id])
  latihanClassId Int  
  materi    LatihanMateri[]
}

model LatihanMateri {
  id        Int          @id @default(autoincrement())
  name      String
  course    LatihanCourse @relation(fields: [courseId], references: [id])
  courseId  Int
  slug      String?
  time      Int?
  soal    LatihanSoal[]
  score ScoreLatihan[]
}

model LatihanSoal {
  id         Int            @id @default(autoincrement())
  nomorSoal Int?
  question   String
  type             SoalType @default(PILIHAN_GANDA)
  optionA          String?
  optionB          String?
  optionC          String?
  optionD          String?
  optionE          String?
  correctOption    AnswerOption?   // untuk pilihan ganda
  correctEssay     String? 
  materiSoal       String?
  materi     LatihanMateri  @relation(fields: [materiId], references: [id])
  materiId   Int
  asnwerSoal AnswerLatihanUser[]
  
}

enum SoalType {
  PILIHAN_GANDA
  ESAI
}

enum AnswerOption {
  A
  B
  C
  D
  E
}

model AnswerLatihanUser {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    Int
  soal      LatihanSoal    @relation(fields: [soalId], references: [id])
  soalId    Int
  jawaban   String
  benar     Boolean
  materiSoal String?
  waktu     DateTime       @default(now())
}

model ScoreLatihan {
  id Int @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    Int
  materi      LatihanMateri    @relation(fields: [materiId], references: [id])
  materiId    Int
  score     Int
  date    DateTime          @default(now())
}

model SnbtTryout{
  id Int @id @default(autoincrement())
  name String?
  image String?
  slug String? @unique
  isfree Boolean?
  isclosed Boolean?
  marketing String?
  startedAt  DateTime // waktu mulai
  endedAt    DateTime // waktu selesai
  createdAt  DateTime @default(now())
  tryoutMateri SnbtTryoutMateri[]
  enrollmentsSnbt EnrollmentSnbtTryout[]
  paymentsSnbt PaymentSnbtTryout[]
  shareSnbt ShareSnbt[]
  clickSnbt ClickSnbtTryout[]
}

model SnbtTryoutMateri{
   id Int @id @default(autoincrement())
   name String?
   tryout SnbtTryout @relation(fields: [tryoutId], references: [id])
   tryoutId Int
   time Int
   snbtSoal SnbtSoal[]
}

model SnbtSoal{
  id         Int            @id @default(autoincrement())
  nomorSoal Int?
  question   String
  type             SoalType @default(PILIHAN_GANDA)
  optionA          String?
  optionB          String?
  optionC          String?
  optionD          String?
  optionE          String?
  correctOption    AnswerOption?   // untuk pilihan ganda
  correctEssay     String? 
  materiSoal       String?
  snbtMateri     SnbtTryoutMateri  @relation(fields: [snbtMateriId], references: [id])
  snbtMateriId   Int
  
  
}

model EnrollmentSnbtTryout {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  snbtTryoutId Int
  snbtTryout SnbtTryout @relation(fields: [snbtTryoutId], references: [id])
  isPaid Boolean @default(false)
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
}

model PaymentSnbtTryout{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  snbtTryout SnbtTryout @relation(fields: [snbtTryoutId], references: [id])
  snbtTryoutId Int
  snbtMateri String
  isPaid Boolean @default(false)
  createdAt DateTime @default(now())
}

model PaymentProduct{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  product Product @relation(fields: [productId], references: [id])
  productId Int
}

model ShareSnbt{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  snbtTryout SnbtTryout @relation(fields: [snbtTryoutId], references: [id])
  snbtTryoutId Int
  isShared Boolean @default(true)
  sharedAt DateTime @default(now())
}

model ClickSnbtTryout{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  snbtTryoutId Int
  snbtTryout SnbtTryout @relation(fields: [snbtTryoutId], references: [id])
  snbtMateri String
  isPaid Boolean @default(false)
  clickedAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expiresAt DateTime
}

model Product{
  id Int @id @default(autoincrement())
  name String
  slug String @unique
  price Int
  image String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paymentProduct PaymentProduct[]
}